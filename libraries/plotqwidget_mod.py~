"""
Copyright (C) 2017 Carmelo Mordini

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
# -*- coding: utf-8 -*-
"""
Created on Sun May 24 01:46:57 2015

@author: carmelo
"""
import PyQt4
from PyQt4 import QtCore, QtGui

import numpy as np
import pyqtgraph as pg

from matplotlib.cm import get_cmap


class RawSis():
    
    def __init__(self, filename, scale=None):
        
        im0, im1, im, raw = self.readsis(filename)
        if scale is not None:
            self.scale = scale
        else:
            self.scale = 2**16/10.0#1.0
        
        self.im0 = im0/self.scale
        self.im1 = im1/self.scale
        self.im_full  = im/self.scale
        self.raw = raw/self.scale
        
    
    def readsis(self,filename):
        f = open(filename, 'rb')  #apre in binario
        rawdata = np.fromfile(f,'H').astype(int)
        f.close()
        
        width=rawdata[6]  # N cols
        height=rawdata[5] # N rows
        #rispetto ad octave, gli indici cambiano (python is 0-based)
        image = rawdata[-width*height : ]
        image.resize(height,width)
        im0 = image[:height//2, :]
        im1 = image[height//2:, :]
        
        return im0, im1, image, rawdata #, image.shape

class PlotQWidget(QtGui.QWidget):
    
    def __init__(self, *args, **kwargs):
        super(PlotQWidget, self).__init__(*args, **kwargs)
        
    def setupUi(self, setMainWindow):
        self.mainWindow = setMainWindow
        self.lims = None
        
        self.plotLayout = QtGui.QVBoxLayout(self)
        
        self.nameLabel = QtGui.QLabel(self)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.nameLabel.sizePolicy().hasHeightForWidth())
        self.nameLabel.setSizePolicy(sizePolicy)
#        self.nameLabel.setText('ciao')
        self.plotLayout.addWidget(self.nameLabel)
        
#        self.figure, self.ax = plt.subplots(1,1, figsize=(18,6))
        self.imv = pg.ImageView()

        self.plotLayout.addWidget(self.imv)
        
        self.setLayout(self.plotLayout)
        
    def replot(self, image, dic=None, name=None, **kwargs):
        if name is not None:
            self.nameLabel.setText(name)
            levels = (dic['vmin'], dic['vmax'])
            cmap = get_cmap(dic['cmap'])
            cmap_array = np.array([cmap(j) for j in range(cmap.N)])
            cmap_pg = pg.ColorMap(np.arange(cmap.N)/cmap.N, cmap_array)
            self.imv.setImage(image.T,)
            self.imv.setLevels(*levels)
            self.imv.getHistogramWidget().gradient.setColorMap(cmap_pg)

               
         
               
if __name__ == '__main__':
    import sys
    
    app = QtGui.QApplication(sys.argv)
    
    file = '/home/carmelo/eos2/data/images/20160330-EoS - Bragg trials-0008.sis'
    dic = {'vmin': 0, 'vmax': 2.0}

    cmap = get_cmap('gist_stern')
    cmap_array = np.array([cmap(j) for j in range(cmap.N)])
    cmap_pg = pg.ColorMap(np.arange(cmap.N)/cmap.N, cmap_array)

    image = RawSis(file).im0.T

    win = QtGui.QMainWindow()
    imv = pg.ImageView()

    imv.setImage(image)
    imv.setLevels(0.0, 2.0)
    imv.getHistogramWidget().gradient.setColorMap(cmap_pg)
#    imv.updateImage()
#    imv = pg.image(image)
#    print(imv)
#    imv.ui.histogram.gradient.setColorMap(cmap_pg)
    
    win.setCentralWidget(imv)
    win.setWindowTitle('pyqtgraph example: ImageViewColor')
    win.show()  #raisethe IndexError
    
    status = app.exec_()

    sys.exit(status)

